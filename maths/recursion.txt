// Print n times
class Solution {

    void printGfg(int N) {
        // code here
        if(N==0){
            return;
        }
        System.out.print("GFG ");
        printGfg(N-1);
    }
}

// Print n times
import java.util.List;
import java.util.ArrayList;
public class Solution {
    public static List<String> printNtimes(int n){
        if(n==0){
            return new ArrayList<>();
        }
        List<String> arr = printNtimes(n-1); //Receives the result (a list of strings) and stores it in the variable arr.
        arr.add("Coding Ninjas");
        return arr;
    }
}

//  Sum Of First N Numbers
public class Solution {
    public static long sumFirstN(long n) {
        // Write your code here.
        if(n==0){
            return 0;
        }
        return n + sumFirstN(n-1);
    }
}


// Factorial
class Solution {
    static int factorial(int n) {
        // code here
        int total = 0;
        if(n<1){
            return 1;
        }
        total = factorial(n-1)*n;
        return total;
    }
}


// Reverse an Array
class Solution {
    
    public static void swap(int i, int arr[], int n){
        if(i>=n/2){
            return;
        }
        int temp = arr[i];
        arr[i] = arr[n-i-1];
        arr[n-i-1] = temp;
        swap(i+1, arr, n);
    } 
    
    public void reverseArray(int arr[]) {
        // code here
        int n = arr.length;
        swap(0, arr, n);
    }
}

// Reverse a String
class Solution {
    public static String reverseString(String s) {
        // code here
        char[] z = s.toCharArray();
        rever(0, z, z.length);
        return new String(z);
    }
    public static void rever(int i, char[] z, int n){
        if(i>=n/2){
            return;
        }
        char temp = z[i];
        z[i] =  z[n-i-1];
        z[n-i-1] = temp;
        
        rever(i+1, z, n);
    }
}   


// Valid Palindrome
class Solution {
    public boolean isPalindrome(String s) {
        String clean = s.replaceAll("[^a-zA-Z0-9]","").toLowerCase();       // ^ (inside [])	Negation â€” it means "not these characters".
        return check(0, clean);
    }
    public boolean check(int i, String s){
        int n = s.length();
        if(i>=n/2){
            return true;
        }
        if(s.charAt(i) != s.charAt(n-i-1)){
            return false;
        }
        return check(i+1, s);   
    }
}

// Fibonacci Number
class Solution {
    public int fib(int n) {
        if(n<=1){
            return n;
        }
        return fib(n-1) + fib(n-2);
    }
}