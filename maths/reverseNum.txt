// Reverse Integer
class Solution {
    public int reverse(int n) {
        int lastDig = 0;
        while(n!=0|| n>0){
            int mod = n%10;
            n = n/10;
            if(lastDig > 0 && lastDig> (Integer.MAX_VALUE - mod)/10 || lastDig <0 && lastDig< (Integer.MIN_VALUE - mod)/10) return 0;
            lastDig = (lastDig*10)+mod;
        }
        return lastDig;
    }
}

// Reverse digits
class Solution {
    public int reverseDigits(int n) {
        // Code here
        int lastdig;
        int rev = 0;
        while(n>0){
            lastdig = n%10;
            rev = (rev*10) + lastdig;
            n = n/10;
        }
        return rev;
    }
}


// Palindrome Number
class Solution {
    public boolean isPalindrome(int n) {
         int lastDig = 0;
         int m=n;
        while(m>0){
            int mod = m%10;
            m = m/10;
            lastDig = (lastDig*10)+mod;
        }
        if(lastDig==n){
            return true;
        }
        return false;
    }
}

class Solution {
    public boolean isPalindrome(int n) {
        // Code here
        int lastdig;
        int original = n;
        int rev = 0;
        while(n>0){
            lastdig = n%10;
            n = n/10;
            rev = (rev*10)+ lastdig;
        } return rev == original;
    }
}

// Two Sum  
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i =0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i] + nums[j] == target){
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{};
    }
}

// Count Digits
class Solution {
    static int evenlyDivides(int n) {
        // code here
        int lastdig;
        int original = n;
        int count = 0;
        while(n>0){
            lastdig = n%10;
            if(lastdig != 0 && original%lastdig ==0){
                count++;
            }
            n = n/10;
        }
        return count;
    }
}

// Check Armstrong
import java.util.Scanner;
public class Main {
	public static int countDig(int n){
		int temp = n;
		int count =0;
		while(temp>0){
			count++;
			temp = temp/10;
		}return count;
	}
	public static int power(int base, int exp){
		int result =1;
		for (int i = 0; i < exp; i++) {
            result *= base;
        }
        return result;
	}
	public static boolean armstrong(int n){
		int temp =n;
		int sum = 0;
		int digits = countDig(n);
		while(temp>0){
			int lastGig = temp%10;
			sum = sum + power(lastGig, digits);
			temp = temp/10;
		}return sum == n;
	}
	public static void main(String[] args) {
		// Write your code here
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		System.out.println(armstrong(n));
	}
}


easy: Check Armstrong
class Solution {
    static boolean armstrongNumber(int n) {
        // code here
        int lastdig;
        int original = n;
        int sum = 0;
        while(n>0){
            lastdig = n%10;
            sum = sum + (lastdig*lastdig*lastdig);
            n = n/10;
        }
        return sum == original;
    }
}



// is prime 
class Solution {
    static boolean isPrime(int n) {
        // code here
       if (n <= 1) return false; 

        for (int i = 2; i <= n / 2; i++) {
            if (n % i == 0) {
                return false; 
            }
        }
        return true; 
    }
}

// count prime 
class Solution {
    public int countPrimes(int n) {
       if(n<2) return 0;
       boolean[] arr = new boolean[n];
       int max = (int)Math.sqrt(n);
       for(int i = 2; i <= max; i++){
            if(arr[i] == false){
                for(int j = i*i; j<n; j+=i){
                    arr[j] = true;
                }
            }
       }
        int counter = 0;
       for(int i=2; i<n; i++){
            if(arr[i] == false){
                counter++;
            }
       }
       return counter;
    }
}

// 1979. Find Greatest Common Divisor of Array
class Solution {
    public int findGCD(int[] nums) {
        int high = nums[0];
        int low = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < low) low = nums[i];
            if (nums[i] > high) high = nums[i];
        }

        while(high>0 && low>0){
            if(high>low){
                high = high%low;
            }else {low = low%high;}
        }
        
        if(high == 0) {return low;}
        else return high; 
    }
}

