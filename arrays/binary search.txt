// Binary Search elementt x
class Solution {
    public int binarysearch(int[] arr, int k) {
        // Code Here
        int n = arr.length;
        int low = 0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]==k){
                result = mid;
                high = mid-1;
            }else if(arr[mid]<k){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return result;
    }
}

// Lower Bound 
public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        // Write your code here
        int low = 0;
        int high = n-1;
        int result = n;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]>=x){
                result = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return result;
    }
}

// Upper Bound
class Solution {
    int upperBound(int[] arr, int k) {
        // code here
        int n = arr.length;
        int res = n;
        int low =0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]>k){
                res = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return res;
    }
}
