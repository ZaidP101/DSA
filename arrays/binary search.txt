// Binary Search elementt x
class Solution {
    public int binarysearch(int[] arr, int k) {
        // Code Here
        int n = arr.length;
        int low = 0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]==k){
                result = mid;
                high = mid-1;
            }else if(arr[mid]<k){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return result;
    }
}

// Lower Bound 
public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        // Write your code here
        int low = 0;
        int high = n-1;
        int result = n;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]>=x){
                result = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return result;
    }
}

// Upper Bound
class Solution {
    int upperBound(int[] arr, int k) {
        // code here
        int n = arr.length;
        int res = n;
        int low =0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]>k){
                res = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return res;
    }
}

// Ceil The Floor (lowerBound and upperBound)
import java.util.* ;
import java.io.*; 

public class Solution {
    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
      // Wriute your code here.
      int low = 0;
      int high = n-1;
      
      while(low<=high){
        int mid = (low+high)/2;
        if(arr[mid]==x){
          return new int[] {x,x};
        }
        else if(arr[mid]<x){
          low = mid+1;
        }else{
          high = mid -1;
        }
      }
      int a=0;
      int b=0;
      if(low>n-1 || low<0){
        a = -1;
      }else{
        a = arr[low];
      }

      if(high>n-1 || high<0){
        b = -1;
      }else{
        b = arr[high];
      }

      return new int[] {b, a};
    }
}

// Find First and Last Position of Element in Sorted Array
class Solution {
    public int firstOcc(int[] arr, int x, int n){
        int low = 0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]==x){
                result = mid;
                high = mid-1;
            }
            else if(arr[mid]<x){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return result;
    }
    public int secondOcc(int[] arr, int x, int n){
        int res = -1;
        int low =0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]<=x){
                res = mid;
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return res;
    }
    
    public int[] searchRange(int[] arr, int x) {
        int n = arr.length;
        int first = firstOcc(arr, x, n);
        if(first==-1){
            return new int[]{-1,-1};
        }
        int last = secondOcc(arr, x, n);
        return new int[] {first, last};
    }
}

// 