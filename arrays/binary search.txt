// Binary Search elementt x
class Solution {
    public int binarysearch(int[] arr, int k) {
        // Code Here
        int n = arr.length;
        int low = 0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]==k){
                result = mid;
                high = mid-1;
            }else if(arr[mid]<k){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return result;
    }
}

// Lower Bound 
public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        // Write your code here
        int low = 0;
        int high = n-1;
        int result = n;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]>=x){
                result = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return result;
    }
}

// Upper Bound
class Solution {
    int upperBound(int[] arr, int k) {
        // code here
        int n = arr.length;
        int res = n;
        int low =0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]>k){
                res = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return res;
    }
}

// Ceil The Floor (lowerBound and upperBound)
import java.util.* ;
import java.io.*; 

public class Solution {
    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
      // Wriute your code here.
      int low = 0;
      int high = n-1;
      
      while(low<=high){
        int mid = (low+high)/2;
        if(arr[mid]==x){
          return new int[] {x,x};
        }
        else if(arr[mid]<x){
          low = mid+1;
        }else{
          high = mid -1;
        }
      }
      int a=0;
      int b=0;
      if(low>n-1 || low<0){
        a = -1;
      }else{
        a = arr[low];
      }

      if(high>n-1 || high<0){
        b = -1;
      }else{
        b = arr[high];
      }

      return new int[] {b, a};
    }
}

// Find First and Last Position of Element in Sorted Array
class Solution {
    public int firstOcc(int[] arr, int x, int n){
        int low = 0;
        int high = n-1;
        int result = -1;
        while(low<=high){
            int mid = (high+low)/2;
            if(arr[mid]==x){
                result = mid;
                high = mid-1;
            }
            else if(arr[mid]<x){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return result;
    }
    public int secondOcc(int[] arr, int x, int n){
        int res = -1;
        int low =0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]<=x){
                res = mid;
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return res;
    }
    
    public int[] searchRange(int[] arr, int x) {
        int n = arr.length;
        int first = firstOcc(arr, x, n);
        if(first==-1){
            return new int[]{-1,-1};
        }
        int last = secondOcc(arr, x, n);
        return new int[] {first, last};
    }
}

// Number of occurrence
class Solution {
    
    public static int firstOcc(int[] arr, int k, int n){
        int low = 0;
        int high = n-1;
        int res = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==k){
                res = mid;
                high =mid-1;
            }
            else if(arr[mid]<k){
                low = mid +1;
            }else{
                high =mid-1;
            }
        }
        return res;
    }
    public static int secondOcc(int[] arr, int k, int n){
        int low = 0;
        int high = n-1;
        int res = 0;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]<=k){
                res = mid;
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return res;
    }
    int countFreq(int[] arr, int k) {
        // code here
        int n = arr.length;
        int first = firstOcc(arr, k, n);
        if(first==-1){
            return 0;
        }
        int second = secondOcc(arr, k, n);
        
        return (second - first)+1;
    }
}


//  Search in Rotated Sorted Array 1
        // if arr cpntains duplicates as well use:
            if(arr[low] == arr[mid] && arr[mid] == arr[high]){
                low++;
                high--;
                continue;
            }
            otherwise:--v
class Solution {
    public int search(int[] arr, int k) {
        int n = arr.length;
        int low = 0;
        int high = n-1;
        while (low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==k){
                return mid;
            }
            if(arr[low]<=arr[mid]){
                if(arr[low]<=k && k<=arr[mid]){
                    high = mid -1;
                }else{
                    low = mid+1;
                }
            }else{
                if(arr[mid]<=k && k<=arr[high]){
                    low = mid +1;
                }else{
                    high = mid -1;
                }
            }
        }return -1;
    }
}

// Find Minimum in Rotated Sorted Array
class Solution {
    public int findMin(int[] arr) {
        int n = arr.length;
        int low = 0;
        int high = n-1;
        int ans = Integer.MAX_VALUE;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[low]<=arr[mid]){
                ans = Math.min(ans, arr[low]);
                low = mid+1;
            }else{
                ans = Math.min(ans, arr[mid]);
                high = mid-1;
            }
        }
        return ans;
    }
}

// Find Kth Rotation Sorted Array
class Solution {
    public int findKRotation(List<Integer> arr) {
        // Code here
        int n = arr.size();
        int low = 0;
        int high = n-1;
        int ans = Integer.MAX_VALUE;
        int index =-1;
        
        while(low<=high){
            int mid = (low+high)/2;
            if(arr.get(low)<=arr.get(mid)){
                if(arr.get(low)<ans){
                    ans = arr.get(low);
                    index = low;
                }
                low = mid+1;
            }else{
                if(arr.get(mid)<ans){
                    ans = arr.get(mid);
                    index = mid;
                }
                high = mid-1;
            }
        }
        return index;
    }
}

// Single Element in a Sorted Array
        Input: nums = [1,1,2,3,3,4,4,8,8]
        Output: 2
class Solution {
    public int singleNonDuplicate(int[] arr) {
        int n = arr.length;
        if(n==1){
            return arr[0];
        }
        if(arr[0]!=arr[1]){
            return arr[0];
        }
        if(arr[n-1]!=arr[n-2]){
            return arr[n-1];
        }
        int low =1; 
        int high = n-2;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid] != arr[mid+1] && arr[mid]!=arr[mid-1]){
                return arr[mid];
            }
            if(mid%2==1 && arr[mid]==arr[mid-1] || mid%2==0 && arr[mid] == arr[mid+1]){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return -1;
    }
}

// 