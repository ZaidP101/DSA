// Two Sum (with Map)
class Solution {
    public int[] twoSum(int[] arr, int target) {
        HashMap<Integer, Integer> mpp = new HashMap<>();
        int n = arr.length;
        for(int i=0; i<n; i++){
            int num = arr[i];
            int moreNeeded = target - num;
            if(mpp.containsKey(moreNeeded)){
                return new int [] {mpp.get(moreNeeded), i};
            }
            mpp.put(num, i);
        }
        return new int[] {-1,-1};

    }
}

// Witout MAP
import java.util.*;
public class Solution {
    public static String read(int n, int []arr, int target){
        // Write your code here.
        Arrays.sort(arr);
        int left = 0;
        int right = n-1;
        while (left<right){
            int sum = arr[left] + arr[right];
            if(sum == target){
               return "YES";
            }else if(sum>target){
                right--;
            }else left ++;
        }
        return "NO";

    }
}

// Sort 0s, 1s and 2s ()
class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
        // code here
        int n = arr.length;
        int low =0;
        int mid = 0;
        int high = n-1;
        while(mid<=high){
            if(arr[mid]==0){
                int temp = arr[mid];
                arr[mid] = arr[low];
                arr[low] = temp;
                mid++;
                low++;
            }else if(arr[mid]==1){
                mid++;
            }else if(arr[mid]==2){
                 int temp = arr[mid];
                arr[mid] = arr[high];
                arr[high] = temp;
                high--;
            }
        }
    }
}

// Majority element (using Collections)
public class Solution {
	public static int findMajority(int[] arr, int n) {
		// Write your code here.
		int count = 0;
		int num =0;
		for (int i =0; i<n; i++){
			if(count ==0){
				count=1;
				num = arr[i];
			}
			else if(arr[i]== num){
				count ++;
			}else{
				count --;
			} 
		}
		int cnt =0;
		for(int i=0; i<n; i++){
			if(arr[i]==num) {cnt++;}
		}
		if(cnt>n/2){
			return num;
		}
		return -1;
	}
}

//  Maximum Subarray Sum (Kadane's Algorithm    )
public static long maxSubarraySum(int[] arr, int n){
		long mx = Long.MIN_VALUE;
		int sum = 0;
		for(int i=0; i< n ; i++){
			sum += arr[i];

			if(sum>mx){
				mx = sum;
			}
			if(sum<0){
				sum = 0;
			}
		}return mx;
}

// Maximum Sub Array (type 2)
    Input: arr[] = [1, 2, 5, -7, 2, 6]
    Output: [1, 2, 5]
// User function Template for Java
import java.util.*;
class Solution {
    public ArrayList<Integer> findSubarray(int arr[]) {
        // code here
        int n = arr.length;
        long sum = 0;
        long mx = -1;
        int ansStart = -1;
        int ansEnd = -1;
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] >= 0) {
                sum += arr[i];
                if (sum >= mx ) {
                    mx = sum;
                    ansStart = start;
                    ansEnd = i;
                }
            } else {
                sum = 0;
                start = i + 1;
            }
        }
        ArrayList<Integer> res = new ArrayList<>();
       if (mx < 0) {
            res.add(-1);
        } else {
            for (int i = ansStart; i <= ansEnd; i++) {
                res.add(arr[i]);
            }
        }

        return res;
    }
}

// Best Time to Buy and Sell Stock
class Solution {
    public int maxProfit(int[] arr) {
        int n = arr.length;
        int mn = arr[0];
        int profit = 0;
        for(int i =1; i<n; i++){
            mn = Math.min(mn, arr[i]);
            profit = Math.max(arr[i] - mn, profit);
        }
        return profit;
    }
}


// Alternate Positive and Negative
import java.util.* ;
import java.io.*; 

public class Solution {
	public static void posAndNeg(int[] arr) {
		// Separate positive and negative numbers
		ArrayList<Integer> pos = new ArrayList<>();
        ArrayList<Integer> neg = new ArrayList<>();
        
        for (int num : arr) {
            if (num >= 0)
                pos.add(num);
            else
                neg.add(num);
        }
        
        int i = 0, p = 0, n = 0;
        
        while (p < pos.size() && n < neg.size()) {
            arr[i++] = pos.get(p++);
            arr[i++] = neg.get(n++);
        }

        while (p < pos.size()) {
            arr[i++] = pos.get(p++);
        }


        while (n < neg.size()) {
            arr[i++] = neg.get(n++);
        }
	}
}


// Alternate Positive and Negative (Equal number of - and +)
class Solution {
    public int[] rearrangeArray(int[] arr) {
        int pov = 0;
        int neg = 1;
        int n = arr.length;
        int[] res = new int[n];
        for (int i=0; i<n; i++){
            if(arr[i]<0){
                res[neg] = arr[i];
                neg +=2;
            }else{
                res[pov] = arr[i];
                pov +=2;
            }
        }
        return res;
    }
}

// Next Permutation
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> arr) 
	{
		// Write your code here.
		int n = arr.size();
		int pt = -1;
		for(int i=n-2; i>=0; i--){
			if(arr.get(i)<arr.get(i+1)){
				pt = i;
				break;
			}
		}
		if(pt == -1){
			reverse(arr, 0, n-1);
			return arr;
		}
		
		for(int i=n-1; i>=pt; i--){
			if(arr.get(i)> arr.get(pt)){
				int temp = arr.get(pt);
				arr.set(pt, arr.get(i));
				arr.set(i, temp);
				break;
			}
		}
		reverse(arr, pt+1, n-1);
		return  arr;	
	}
	public static void reverse(ArrayList<Integer> arr, int start, int end){
		while(start < end){
            int temp = arr.get(start);
            arr.set(start, arr.get(end));
            arr.set(end, temp);

            start++;
            end--;
        }
	}
}

// Leaders in an array
import java.util.* ;
import java.io.*; 
public class Solution {
	public static ArrayList<Integer> findLeaders(ArrayList<Integer> arr, int n) {
		// Write your code here.
		int mx = Integer.MIN_VALUE;
		ArrayList<Integer> res = new ArrayList<>();
		for(int i=n-1; i>=0; i--){
			if(arr.get(i)>mx){
				res.add(arr.get(i));
				mx = arr.get(i);
			}
		}
		reverse(res, 0, res.size() - 1);
		return res;
	}
	public static void reverse(ArrayList<Integer> arr, int start, int end ){
		while (start< end){
			int temp = arr.get(start);
            arr.set(start, arr.get(end));
            arr.set(end, temp);

            start++;
            end--;
		}
	}
}

// Longest Consecutive Sequence
import java.io.*;
import java.util.* ;

public class Solution {
    public static int lengthOfLongestConsecutiveSequence(int[] arr, int n) {
        // Write your code here.\
        int cnt =0;
        if(n==0){
            return 0;
        }
        int longest =1;
        Set<Integer> res =new HashSet<>();
        for(int i=0; i<n; i++){
            res.add(arr[i]);
        }
        for(int num : res){
            if(!res.contains(num-1)){
                cnt = 1;
                int x = num;
                while(res.contains(x+1)){
                    cnt++;
                    x = x+1;

                    longest = Math.max(longest, cnt);
                }
            }
        }
        return longest;
    }
}

// Set Matrix Zeroes ///////////////////// Matrix ////////////
class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0]. length;
        int row[] = new int[n];
        int col[] = new int[m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 0){
                    row[i] = 1;
                    col[j] = 1;
                }
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(row[i]==1 || col[j]==1){
                    matrix[i][j] = 0;
                }
            }
        }
    }
}

// Rotate matrix by 90 degrees
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {
	public static ArrayList<ArrayList<Integer>> rotateMatrix(ArrayList<ArrayList<Integer>> matrix){
		// Write your code here.
		int n = matrix.size();
		for (int i = 0; i < n; i++) {
            Collections.reverse(matrix.get(i));
        }
		for(int i=0; i<n; i++){
			for(int j=i; j<n; j++){
				int temp = matrix.get(i).get(j);
				matrix.get(i).set(j, matrix.get(j).get(i));
				matrix.get(j).set(i, temp);
			}
		}
		return matrix;
	}
}
// and 
// User function Template for Java
import java.util.* ;
class GFG {
    static void rotate(int mat[][]) {
        // Code Here
        int n = mat.length;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                int temp = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = temp;
            }
        }
        for (int i = 0; i < n; i++) {
            int left = 0, right = n - 1;
            while (left < right) {
                int temp = mat[i][left];
                mat[i][left] = mat[i][right];
                mat[i][right] = temp;
                left++;
                right--;
            }
        }  
    }
} 

//Spiral Matrix
import java.util.* ;
import java.io.*; 
public class Solution {
    public static List<Integer> spiralPathMatrix(int[][] mat, int n, int m) {
        // Write you code here.
        int top = 0;
        int botom = n-1;
        int left = 0;
        int right = m-1;
        List<Integer> ans = new ArrayList<>();
        while (left <= right && top <= botom){
            for(int i=left; i<=right; i++){
                ans.add(mat[top][i]);
            }
            top++;
            for(int i=top; i<=botom; i++){
                ans.add(mat[i][right]);
            }
            right--;    
            if(top<=botom){
                for(int i=right; i>=left; i--){
                    ans.add(mat[botom][i]);
                }
                botom--;
            }
            if(left<=right){
                for(int i=botom; i>=top; i--){
                    ans.add(mat[i][left]);
                }
                left++;
            }
        }
        return ans;
    }
}


