// Two Sum (with Map)
class Solution {
    public int[] twoSum(int[] arr, int target) {
        HashMap<Integer, Integer> mpp = new HashMap<>();
        int n = arr.length;
        for(int i=0; i<n; i++){
            int num = arr[i];
            int moreNeeded = target - num;
            if(mpp.containsKey(moreNeeded)){
                return new int [] {mpp.get(moreNeeded), i};
            }
            mpp.put(num, i);
        }
        return new int[] {-1,-1};

    }
}

// Witout MAP
import java.util.*;
public class Solution {
    public static String read(int n, int []arr, int target){
        // Write your code here.
        Arrays.sort(arr);
        int left = 0;
        int right = n-1;
        while (left<right){
            int sum = arr[left] + arr[right];
            if(sum == target){
               return "YES";
            }else if(sum>target){
                right--;
            }else left ++;
        }
        return "NO";

    }
}

// Sort 0s, 1s and 2s ()
class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
        // code here
        int n = arr.length;
        int low =0;
        int mid = 0;
        int high = n-1;
        while(mid<=high){
            if(arr[mid]==0){
                int temp = arr[mid];
                arr[mid] = arr[low];
                arr[low] = temp;
                mid++;
                low++;
            }else if(arr[mid]==1){
                mid++;
            }else if(arr[mid]==2){
                 int temp = arr[mid];
                arr[mid] = arr[high];
                arr[high] = temp;
                high--;
            }
        }
    }
}

// Majority element (using Collections)
public class Solution {
	public static int findMajority(int[] arr, int n) {
		// Write your code here.
		int count = 0;
		int num =0;
		for (int i =0; i<n; i++){
			if(count ==0){
				count=1;
				num = arr[i];
			}
			else if(arr[i]== num){
				count ++;
			}else{
				count --;
			} 
		}
		int cnt =0;
		for(int i=0; i<n; i++){
			if(arr[i]==num) {cnt++;}
		}
		if(cnt>n/2){
			return num;
		}
		return -1;
	}
}

//  Maximum Subarray Sum (Kadane's Algorithm    )
public static long maxSubarraySum(int[] arr, int n){
		long mx = Long.MIN_VALUE;
		int sum = 0;
		for(int i=0; i< n ; i++){
			sum += arr[i];

			if(sum>mx){
				mx = sum;
			}
			if(sum<0){
				sum = 0;
			}
		}return mx;
}

// 



